stages:
- build
- build docker

.build: &build
  stage: build
  cache:
    paths:
    - .cache
  before_script:
  - mkdir -p .cache
  - export GOPATH="$CI_PROJECT_DIR/.cache"
  - export GOCACHE="$CI_PROJECT_DIR/.cache/build"
  - export GO_LDFLAGS="-s -w -linkmode external -extldflags -static -X main.Tag=$CI_COMMIT_TAG -X main.Commit=$CI_COMMIT_SHA -X 'main.BuildTime=`date '+%b %_d %Y, %H:%M:%S'`'"
  script:
  - go build -ldflags "$GO_LDFLAGS" -o mautrix-discord
  - sha256sum mautrix-discord | tee mautrix-discord.sha256sum
  artifacts:
    paths:
    - mautrix-discord
    - mautrix-discord.sha256sum
    - example-config.yaml

.build-docker: &build-docker
  image: docker:stable
  stage: build docker
  before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
  - docker pull $CI_REGISTRY_IMAGE:latest || true
  - docker build --pull --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-$DOCKER_ARCH . --file Dockerfile.ci
  - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-$DOCKER_ARCH
  - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-$DOCKER_ARCH
  - if [ "$CI_COMMIT_BRANCH" = "main" ]; then docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest && docker push $CI_REGISTRY_IMAGE:latest; fi

build amd64:
  <<: *build
  image: dock.mau.dev/tulir/gomuks-build-docker:linux-amd64

build docker amd64:
  <<: *build-docker
  dependencies:
  - build amd64
  needs:
  - build amd64
  variables:
    DOCKER_ARCH: amd64
  after_script:
  - |
    if [[ "$CI_COMMIT_BRANCH" == "main" && "$CI_JOB_STATUS" == "success" ]]; then
      apk add --update curl jq
      rm -rf /var/cache/apk/*

      jq -n '
         {
           password:  env.BEEPER_DEV_ADMIN_NIGHTLY_PASS,
           bridge:    env.BEEPER_BRIDGE_TYPE,
           image:     "\(env.CI_REGISTRY_IMAGE):\(env.CI_COMMIT_SHA)-amd64",
           channel:   "STABLE"
         }
        ' | curl "$BEEPER_DEV_ADMIN_API_URL" -H "Content-Type: application/json" -d @-

      jq -n '
         {
           password:    env.BEEPER_PROD_ADMIN_NIGHTLY_PASS,
           bridge:      env.BEEPER_BRIDGE_TYPE,
           image:       "\(env.CI_REGISTRY_IMAGE):\(env.CI_COMMIT_SHA)-amd64",
           channel:     "INTERNAL",
           deployNext:  true
         }
         ' | curl "$BEEPER_PROD_ADMIN_API_URL" -H "Content-Type: application/json" -d @-
    fi
